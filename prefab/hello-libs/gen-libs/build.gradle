apply plugin: 'com.android.library'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // explicitly build libs
                targets 'gmath', 'gperf'
            }
           
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

// prepare the prefab tree (without actual binaries)
task seedPrefabTree {
    doLast {
        for (lib in ["gmath.a", "gperf.so"]) {
            def libname = lib.replaceFirst("[.].*","")
            def isFirstSync = fileTree("build/intermediates/cmake").isEmpty()

            file("build/prefab/modules/${libname}").mkdirs()
            file("build/prefab/modules/${libname}/module.json").write("{\"export_libraries\":[]}")

            def libs = file("build/prefab/modules/${libname}/libs")
            file("${libs}").mkdirs()
            for (abi in ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]) {
                file("${libs}/android.${abi}").mkdirs()
                if (isFirstSync) {
                    file("${libs}/android.${abi}/lib${lib}").write("")
                } else if (file("${libs}/android.${abi}/lib${lib}").exists()) {
                    file("${libs}/android.${abi}/lib${lib}").delete()
                }
                file("${libs}/android.${abi}/abi.json").
                        write("{\"abi\":\"${abi}\",\"api\":16,\"ndk\":21,\"stl\":\"none\"}")
            }
        }
        file("build/prefab/prefab.json").write("{\"name\":\"gen-libs\",\"schema_version\":1,\"dependencies\":[],\"version\":\"1.0.0\"}")
    }
}

for (variant in ["Debug", "Release"]) {
    task "bundle${variant}PrefabAar"(type: Zip) {
        dependsOn 'seedPrefabTree'
        archiveFileName = "gen-libs-prefab-${variant.toLowerCase()}.aar"
        destinationDirectory = file('../distribution')

        doFirst {
            println ('create ' + file("../distribution/gen-libs-prefab-${variant.toLowerCase()}.aar"))
        }

        for (libname in ["gmath", "gperf"]) {
            for (abi in ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]) {
                into("prefab/modules/${libname}/libs/android.${abi}") {
                    from file("build/intermediates/cmake/${variant.toLowerCase()}/obj/${abi}") include "lib${libname}.*"
                }
            }
            into("prefab/modules/${libname}/include") { from file("src/main/cpp/${libname}/src") include "*.h" }
        }
        into ("prefab") { from file("build/prefab") }
        into ("") { from file("src/main") include "AndroidManifest.xml" }
    }
}

if (!file('../distribution/gen-libs-prefab-debug.aar').exists()) {
    bundleDebugPrefabAar.getActions().get(0).execute(bundleDebugPrefabAar)
    seedPrefabTree.getActions().get(0).execute(seedPrefabTree)
    bundleDebugPrefabAar.getActions().get(1).execute(bundleDebugPrefabAar)
}

afterEvaluate {
    bundleDebugPrefabAar.dependsOn mergeDebugNativeLibs
    bundleReleasePrefabAar.dependsOn mergeReleaseNativeLibs

    assembleDebug.dependsOn bundleDebugPrefabAar
    assembleRelease.dependsOn bundleReleasePrefabAar

    project(':app').tasks.findByName('preDebugBuild').dependsOn bundleDebugPrefabAar
    project(':app').tasks.findByName('preReleaseBuild').dependsOn bundleReleasePrefabAar
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
}
